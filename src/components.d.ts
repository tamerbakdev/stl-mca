/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/router';

import {
  McaAppHeaderLink,
} from './components/common/mca-header';
import {
  DataTableHeaderCol,
  DataTableState,
} from './components/shared/data-table/mca-data-table';
import {
  AbstractFormControlOptions,
  TextualInputTypes,
  ValidationPredicate,
} from './components/shared/form/form-contorl.model';

declare global {
  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;
    componentOnReady(done: (ele?: this) => void): void;
  }
}



import {
  McaAppHeaderComponent as McaAppHeader
} from './components/common/mca-header';

declare global {
  interface HTMLMcaAppHeaderElement extends McaAppHeader, HTMLStencilElement {
  }
  var HTMLMcaAppHeaderElement: {
    prototype: HTMLMcaAppHeaderElement;
    new (): HTMLMcaAppHeaderElement;
  };
  interface HTMLElementTagNameMap {
    "mca-app-header": HTMLMcaAppHeaderElement;
  }
  interface ElementTagNameMap {
    "mca-app-header": HTMLMcaAppHeaderElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "mca-app-header": JSXElements.McaAppHeaderAttributes;
    }
  }
  namespace JSXElements {
    export interface McaAppHeaderAttributes extends HTMLAttributes {
      brandLogo?: string;
      brandTitle?: string;
      links?: Array<McaAppHeaderLink>;
    }
  }
}


import {
  McaAppComponent as McaApp
} from './components/mca-app';

declare global {
  interface HTMLMcaAppElement extends McaApp, HTMLStencilElement {
  }
  var HTMLMcaAppElement: {
    prototype: HTMLMcaAppElement;
    new (): HTMLMcaAppElement;
  };
  interface HTMLElementTagNameMap {
    "mca-app": HTMLMcaAppElement;
  }
  interface ElementTagNameMap {
    "mca-app": HTMLMcaAppElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "mca-app": JSXElements.McaAppAttributes;
    }
  }
  namespace JSXElements {
    export interface McaAppAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  McaDataPage as McaData
} from './components/pages/mca-data';

declare global {
  interface HTMLMcaDataElement extends McaData, HTMLStencilElement {
  }
  var HTMLMcaDataElement: {
    prototype: HTMLMcaDataElement;
    new (): HTMLMcaDataElement;
  };
  interface HTMLElementTagNameMap {
    "mca-data": HTMLMcaDataElement;
  }
  interface ElementTagNameMap {
    "mca-data": HTMLMcaDataElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "mca-data": JSXElements.McaDataAttributes;
    }
  }
  namespace JSXElements {
    export interface McaDataAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  McaEditorPage as McaEditor
} from './components/pages/mca-editor';

declare global {
  interface HTMLMcaEditorElement extends McaEditor, HTMLStencilElement {
  }
  var HTMLMcaEditorElement: {
    prototype: HTMLMcaEditorElement;
    new (): HTMLMcaEditorElement;
  };
  interface HTMLElementTagNameMap {
    "mca-editor": HTMLMcaEditorElement;
  }
  interface ElementTagNameMap {
    "mca-editor": HTMLMcaEditorElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "mca-editor": JSXElements.McaEditorAttributes;
    }
  }
  namespace JSXElements {
    export interface McaEditorAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  McaHomePage as McaHome
} from './components/pages/mca-home';

declare global {
  interface HTMLMcaHomeElement extends McaHome, HTMLStencilElement {
  }
  var HTMLMcaHomeElement: {
    prototype: HTMLMcaHomeElement;
    new (): HTMLMcaHomeElement;
  };
  interface HTMLElementTagNameMap {
    "mca-home": HTMLMcaHomeElement;
  }
  interface ElementTagNameMap {
    "mca-home": HTMLMcaHomeElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "mca-home": JSXElements.McaHomeAttributes;
    }
  }
  namespace JSXElements {
    export interface McaHomeAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  McaDataTableFilter as McaDataTableFilter
} from './components/shared/data-table/mca-data-table-filter';

declare global {
  interface HTMLMcaDataTableFilterElement extends McaDataTableFilter, HTMLStencilElement {
  }
  var HTMLMcaDataTableFilterElement: {
    prototype: HTMLMcaDataTableFilterElement;
    new (): HTMLMcaDataTableFilterElement;
  };
  interface HTMLElementTagNameMap {
    "mca-data-table-filter": HTMLMcaDataTableFilterElement;
  }
  interface ElementTagNameMap {
    "mca-data-table-filter": HTMLMcaDataTableFilterElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "mca-data-table-filter": JSXElements.McaDataTableFilterAttributes;
    }
  }
  namespace JSXElements {
    export interface McaDataTableFilterAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  McaDataTableHeader as McaDataTableHeader
} from './components/shared/data-table/mca-data-table-header';

declare global {
  interface HTMLMcaDataTableHeaderElement extends McaDataTableHeader, HTMLStencilElement {
  }
  var HTMLMcaDataTableHeaderElement: {
    prototype: HTMLMcaDataTableHeaderElement;
    new (): HTMLMcaDataTableHeaderElement;
  };
  interface HTMLElementTagNameMap {
    "mca-data-table-header": HTMLMcaDataTableHeaderElement;
  }
  interface ElementTagNameMap {
    "mca-data-table-header": HTMLMcaDataTableHeaderElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "mca-data-table-header": JSXElements.McaDataTableHeaderAttributes;
    }
  }
  namespace JSXElements {
    export interface McaDataTableHeaderAttributes extends HTMLAttributes {
      headerRow?: Array<DataTableHeaderCol>;
    }
  }
}


import {
  McaDataTablePage as McaDataTablePager
} from './components/shared/data-table/mca-data-table-pager';

declare global {
  interface HTMLMcaDataTablePagerElement extends McaDataTablePager, HTMLStencilElement {
  }
  var HTMLMcaDataTablePagerElement: {
    prototype: HTMLMcaDataTablePagerElement;
    new (): HTMLMcaDataTablePagerElement;
  };
  interface HTMLElementTagNameMap {
    "mca-data-table-pager": HTMLMcaDataTablePagerElement;
  }
  interface ElementTagNameMap {
    "mca-data-table-pager": HTMLMcaDataTablePagerElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "mca-data-table-pager": JSXElements.McaDataTablePagerAttributes;
    }
  }
  namespace JSXElements {
    export interface McaDataTablePagerAttributes extends HTMLAttributes {
      currentPage?: number;
      pagesCount?: number;
    }
  }
}


import {
  McaDataTableView as McaDataTableView
} from './components/shared/data-table/mca-data-table-view';

declare global {
  interface HTMLMcaDataTableViewElement extends McaDataTableView, HTMLStencilElement {
  }
  var HTMLMcaDataTableViewElement: {
    prototype: HTMLMcaDataTableViewElement;
    new (): HTMLMcaDataTableViewElement;
  };
  interface HTMLElementTagNameMap {
    "mca-data-table-view": HTMLMcaDataTableViewElement;
  }
  interface ElementTagNameMap {
    "mca-data-table-view": HTMLMcaDataTableViewElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "mca-data-table-view": JSXElements.McaDataTableViewAttributes;
    }
  }
  namespace JSXElements {
    export interface McaDataTableViewAttributes extends HTMLAttributes {
      dataParams?: DataTableState;
    }
  }
}


import {
  McaDataTable as McaDataTable
} from './components/shared/data-table/mca-data-table';

declare global {
  interface HTMLMcaDataTableElement extends McaDataTable, HTMLStencilElement {
  }
  var HTMLMcaDataTableElement: {
    prototype: HTMLMcaDataTableElement;
    new (): HTMLMcaDataTableElement;
  };
  interface HTMLElementTagNameMap {
    "mca-data-table": HTMLMcaDataTableElement;
  }
  interface ElementTagNameMap {
    "mca-data-table": HTMLMcaDataTableElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "mca-data-table": JSXElements.McaDataTableAttributes;
    }
  }
  namespace JSXElements {
    export interface McaDataTableAttributes extends HTMLAttributes {
      dataUrl?: string;
    }
  }
}


import {
  McaTextualFormControl as McaFormTextControl
} from './components/shared/form/form-text-control';

declare global {
  interface HTMLMcaFormTextControlElement extends McaFormTextControl, HTMLStencilElement {
  }
  var HTMLMcaFormTextControlElement: {
    prototype: HTMLMcaFormTextControlElement;
    new (): HTMLMcaFormTextControlElement;
  };
  interface HTMLElementTagNameMap {
    "mca-form-text-control": HTMLMcaFormTextControlElement;
  }
  interface ElementTagNameMap {
    "mca-form-text-control": HTMLMcaFormTextControlElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "mca-form-text-control": JSXElements.McaFormTextControlAttributes;
    }
  }
  namespace JSXElements {
    export interface McaFormTextControlAttributes extends HTMLAttributes {
      cssClasses?: string;
      id?: string;
      inputType?: TextualInputTypes;
      label?: string;
      name?: string;
      placeholder?: string;
      updateOn?: 'blur' | 'key';
      validation?: Array<ValidationPredicate>;
      value?: any;
    }
  }
}


import {
  McaFormComponent as McaFormContainer
} from './components/shared/form/form';

declare global {
  interface HTMLMcaFormContainerElement extends McaFormContainer, HTMLStencilElement {
  }
  var HTMLMcaFormContainerElement: {
    prototype: HTMLMcaFormContainerElement;
    new (): HTMLMcaFormContainerElement;
  };
  interface HTMLElementTagNameMap {
    "mca-form-container": HTMLMcaFormContainerElement;
  }
  interface ElementTagNameMap {
    "mca-form-container": HTMLMcaFormContainerElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "mca-form-container": JSXElements.McaFormContainerAttributes;
    }
  }
  namespace JSXElements {
    export interface McaFormContainerAttributes extends HTMLAttributes {
      controls?: Array<AbstractFormControlOptions>;
    }
  }
}


import {
  McaLoaderComponent as McaLoader
} from './components/shared/loader/mca-loader';

declare global {
  interface HTMLMcaLoaderElement extends McaLoader, HTMLStencilElement {
  }
  var HTMLMcaLoaderElement: {
    prototype: HTMLMcaLoaderElement;
    new (): HTMLMcaLoaderElement;
  };
  interface HTMLElementTagNameMap {
    "mca-loader": HTMLMcaLoaderElement;
  }
  interface ElementTagNameMap {
    "mca-loader": HTMLMcaLoaderElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "mca-loader": JSXElements.McaLoaderAttributes;
    }
  }
  namespace JSXElements {
    export interface McaLoaderAttributes extends HTMLAttributes {
      
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }
